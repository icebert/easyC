#!/bin/bash

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
   
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.

# This script is the integration of all protocols from raw reads processing
# to contact matrix generating.
#
# Written by Wang Meng.

VERSION=0.1

# Default settings
LIB_PATH=$(dirname $(readlink -e $0)) #absolute path of this file
REF_GENOME=""                         #reference genome file path
GENOME_SIZE=""                        #chromosome size 
TRIM_ADAPTER="Y"                      #whether to trim adapter given raw reads
NODE_NUM=1                            #number of nodes to run
THREAD_NUM=6                          #number of threads per node
PHRED=64                              #the default of base quality is in Phred64
REMV_DUP="Y"                          #whether remove duplicates
ADAPTOR="TruSeq2"                     #the default of adaptor sequence is TruSeq2
KEEP_FILE="N"                         #keep intermediate results
CUT_SEQ=""                            #Restriction enzyme recognize sequence
CUT_POINT=""                          #Restriction enzyme cleavage point
MINMQ=30                              #Minimum mapping quality
NAME=""                               #Cell line name
RESOLUTION=5000                       #Contact matrix resolution


source $LIB_PATH/config

export PATH=$FASTQC_HOME:$BWA_HOME:$SAMTOOLS_HOME:$BEDTOOLS_HOME:$PATH


CHECK_AVAILABLE=0
which java &>/dev/null     || { echo "java not found!";     CHECK_AVAILABLE=1; }
which R &>/dev/null        || { echo "R not found!";        CHECK_AVAILABLE=1; }
which bwa &>/dev/null      || { echo "bwa not found!";      CHECK_AVAILABLE=1; }
which samtools &>/dev/null || { echo "samtools not found!"; CHECK_AVAILABLE=1; }


if [ $CHECK_AVAILABLE -ne 0 ]
then
    exit 1
fi

function helps
{
    echo ""
    echo -e "Usage: easyC [option] <Reads1_1.fq> <Reads1_2.fq> ... <ReadsN_1.fq> <ReadsN_2.fq>\c"
    echo ""
    echo " -r STRING        genome reference fasta file path"
    echo " -s STRING        chromsome size"
    echo " -x               input is clean reads"
    echo " -u INT           number of nodes to run [1]"
    echo " -t INT           number of threads per node [6]"
    echo " -c STRING        restriction enzyme recognize sequence"
    echo " -p INT           restriction enzyme cleavage point"
    echo " -l               base quality is Phred33 encoded"
    echo " -d               keep duplicates [default is to remove duplicates]"
    echo " -k               keep intermediate results [default is to remove]"
    echo " -a STRING        adaptor system [default is TruSeq2]"
    echo " -m INT           minimum mapping quality [default is 30]"
    echo " -n STRING        cell line name"
    echo " -e INT           contact matrix resolution [default is 5000]"
    echo " -v               program version"
    echo " -h               help"
    echo ""       
}

if [ $# -eq 0 ]
then
    helps
    exit 0
fi


while getopts "r:s:xu:t:c:p:ldka:m:n:e:vh" optionName
do
    case "$optionName" in
        r) REF_GENOME="$OPTARG";;
        s) GENOME_SIZE="$OPTARG";;
        x) TRIM_ADAPTER="N";;
        u) NODE_NUM=$OPTARG;;
        t) THREAD_NUM=$OPTARG;;
        c) CUT_SEQ="$OPTARG";;
        p) CUT_POINT=$OPTARG;;
        l) PHRED=33;;
        d) REMV_DUP="N";;
        k) KEEP_FILE="Y";;
        a) ADAPTOR="$OPTARG";;
        m) MINMQ="$OPTARG";;
        n) NAME="$OPTARG";;
        e) RESOLUTION="$OPTARG";;
        v) echo "Version: $VERSION"
           exit 0
           ;;
        h|[?])
           helps
           exit 0
           ;;
    esac
done
shift $(($OPTIND - 1))
READS=$@


echo "-------------------------------------------------------------"
echo "            Welcome to use easyC"
echo "               ---- A tool for HiC data analysis"
echo ""
echo "  Version: $VERSION"
echo "  Copyright (C) 2016 - 2017  Center for Bioinformatics, PKU"
echo "-------------------------------------------------------------"
echo ""


# Create log directory if necessory
if [ ! -d log ]
then
    mkdir log
fi


echo "Configuration:" >> log/journal
echo "Reference genome          : $REF_GENOME"   >> log/journal
echo "Remove duplicates         : $REMV_DUP"     >> log/journal
echo "Trim adaptors             : $TRIM_ADAPTER" >> log/journal
echo "Adaptor system            : $ADAPTOR"      >> log/journal
echo "Restriction enzyme recognize sequence : $CUT_SEQ"      >> log/journal
echo "Restriction enzyme cleavage point     : $CUT_POINT"      >> log/journal
echo "" >> log/journal


echo "Program Version:"                                | tee -a log/journal
echo "R        : $(R --version | grep version | head -n 1 | cut -f3 -d' ')" \
                                                       | tee -a log/journal
echo "Java     : $(java -version 2>&1 | head -n 1 | cut -f2 -d'"')" \
                                                       | tee -a log/journal
echo "FastQC   : $(fastqc -v | cut -f2 -d' ')"         | tee -a log/journal
echo "BWA      : $(bwa 2>&1 | grep Version | cut -d' ' -f2)" \
                                                       | tee -a log/journal
echo "samtools : $(samtools 2>&1 | grep Version | cut -d' ' -f2)" \
                                                       | tee -a log/journal
echo "bedtools : $(bedtools --version | cut -d' ' -f2)" \
                                                       | tee -a log/journal
echo "" | tee -a log/journal

echo -e "$(date '+%Y-%m-%d %H:%M:%S')\tPipeline begin\t0\t[OK]" \
| tee -a log/journal




#
# Generate restriction enzyme digested genome regions
#
DIGEST=${REF_GENOME%.fasta}
DIGEST=${DIGEST%.fa}.$CUT_SEQ.digest.bed
if [ ! -f $DIGEST ]
then
    echo -e "$(date '+%Y-%m-%d %H:%M:%S')\tDigest genome begin\t0\t[OK]" \
    | tee -a log/journal

    $LIB_PATH/digest.py --seq $CUT_SEQ --point $CUT_POINT $REF_GENOME > $DIGEST

    if [ $? -ne 0 ]
    then
        echo -e "$(date '+%Y-%m-%d %H:%M:%S')\tDigest genome failed\t0\t[FAIL]" \
        | tee -a log/journal
        echo ""
        echo "------------------------------------------------------------"
        echo "Something bad happened. Details are in the log directory."
        echo "See you next time!"
        echo "------------------------------------------------------------"
        echo ""
        exit 1
    fi

    echo -e "$(date '+%Y-%m-%d %H:%M:%S')\tDigest genome finished\t0\t[OK]" \
    | tee -a log/journal
fi



# if reference genome index doesn't exist, first build the index
if [ ! -e "$REF_GENOME.bwt" ]
then
    echo -e "$(date '+%Y-%m-%d %H:%M:%S')\tBegin bwa index\t0\t[OK]" \
    | tee -a log/journal
    
    bwa index -a bwtsw $REF_GENOME
    
    if [ $? != 0 ]
    then
        echo -e "$(date '+%Y-%m-%d %H:%M:%S')\tOops, error occurred when \
        bwa index\t0\t[FAIL]" | tee -a log/journal
        exit 1
    fi
    echo -e "$(date '+%Y-%m-%d %H:%M:%S')\tbwa index finished successfully\t0\t[OK]"\
    | tee -a log/journal
fi



#
# Find contact pairs of each library
#
if [ "$TRIM_ADAPTER" == "Y" ]
then
    TRIM_ADAPTER=""
else
    TRIM_ADAPTER="-x"
fi
if [ "$REMV_DUP" == "Y" ]
then
    REMV_DUP=""
else
    REMV_DUP="-d"
fi
if [ "$KEEP_FILE" == "N" ]
then
    KEEP_FILE=""
else
    KEEP_FILE="-k"
fi
if [ "$PHRED" -eq 64 ]
then
    PHRED=""
else
    PHRED="-l"
fi


mkfifo "log/$$.fifo"
exec 6<>"log/$$.fifo"
rm "log/$$.fifo"
for ((i=0;i<$NODE_NUM;i++))
do
    echo
done >&6



CONTACTS=""

set $READS
while [ $# -gt 0 ]
do
    reads1=$1
    reads2=$2
    shift 2

    LIB=${reads1%/*}
    CONTACTS="$CONTACTS $LIB/contacts.sorted.rmdup.tsv"
    reads1=${reads1##*/}
    reads2=${reads2##*/}


read -u6
{
    echo -e "$(date '+%Y-%m-%d %H:%M:%S')\tGenerating contact pairs from reads \
            library ${LIB}\t0\t[OK]" | tee -a log/journal

    $LIB_PATH/reads_to_contacts.sh -r $REF_GENOME $TRIM_ADAPTER -t $THREAD_NUM \
                                   -c $CUT_SEQ -p $CUT_POINT $PHRED $REMV_DUP $KEEP_FILE \
                                   -a $ADAPTOR -m $MINMQ -w $LIB $reads1 $reads2

    if [ ${PIPESTATUS[0]} -ne 0 ]
    then
        echo -e "$(date '+%Y-%m-%d %H:%M:%S')\tGenerating contact pairs from raw \
        reads ${LIB} failed\t0\t[FAIL]" | tee -a log/journal
        echo ""
        echo "------------------------------------------------------------"
        echo "Something bad happened. Details are in the log directory."
        echo "See you next time!"
        echo "------------------------------------------------------------"
        echo ""
        exit 1
    fi
    echo -e "$(date '+%Y-%m-%d %H:%M:%S')\tGenerating contact pairs from reads \
            library ${LIB} finished successfully\t0\t[OK]" | tee -a log/journal
echo >&6
} &
done

wait
exec 6>&-




#
# Generate contact matrix
#
echo -e "$(date '+%Y-%m-%d %H:%M:%S')\tBegain generating contact matrix" | tee -a log/journal

$LIB_PATH/generate_matrix.sh $THREAD_NUM $NAME $RESOLUTION N $GENOME_SIZE $DIGEST $CONTACTS \
                             2>>log/generate_matrix.log | tee -a log/journal
#
if [ ${PIPESTATUS[0]} -ne 0 ]
then
    echo -e "$(date '+%Y-%m-%d %H:%M:%S')\tGenerate contact matrix failed\t0\t[FAIL]" \
    | tee -a log/journal
    echo ""
    echo "------------------------------------------------------------"
    echo "Something bad happened. Details are in the log directory."
    echo "See you next time!"
    echo "------------------------------------------------------------"
    echo ""
    exit 1
fi

echo -e "$(date '+%Y-%m-%d %H:%M:%S')\tGenerating contact matrix finished successfully\t0\t[OK]" \
| tee -a log/journal




# Pipeline finished
echo -e "$(date '+%Y-%m-%d %H:%M:%S')\tPipeline finished\t0\t[OK]" \
| tee -a log/journal

echo ""
echo "------------------------------------------------------------"
echo "Congratulate! Pipeline finished successfully at $(date)."
echo "Bye!"
echo "------------------------------------------------------------"
echo ""

exit 0




